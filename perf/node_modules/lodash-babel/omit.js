"use strict";

exports.__esModule = true;
exports.default = void 0;

var _arrayMap = _interopRequireDefault(require("./_arrayMap.js"));

var _baseClone = _interopRequireDefault(require("./_baseClone.js"));

var _baseUnset = _interopRequireDefault(require("./_baseUnset.js"));

var _castPath = _interopRequireDefault(require("./_castPath.js"));

var _copyObject = _interopRequireDefault(require("./_copyObject.js"));

var _customOmitClone = _interopRequireDefault(require("./_customOmitClone.js"));

var _flatRest = _interopRequireDefault(require("./_flatRest.js"));

var _getAllKeysIn = _interopRequireDefault(require("./_getAllKeysIn.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;
/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */

var omit = (0, _flatRest.default)(function (object, paths) {
  var result = {};

  if (object == null) {
    return result;
  }

  var isDeep = false;
  paths = (0, _arrayMap.default)(paths, function (path) {
    path = (0, _castPath.default)(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  (0, _copyObject.default)(object, (0, _getAllKeysIn.default)(object), result);

  if (isDeep) {
    result = (0, _baseClone.default)(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, _customOmitClone.default);
  }

  var length = paths.length;

  while (length--) {
    (0, _baseUnset.default)(result, paths[length]);
  }

  return result;
});
var _default = omit;
exports.default = _default;