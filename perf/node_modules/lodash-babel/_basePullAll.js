"use strict";

exports.__esModule = true;
exports.default = void 0;

var _arrayMap = _interopRequireDefault(require("./_arrayMap.js"));

var _baseIndexOf = _interopRequireDefault(require("./_baseIndexOf.js"));

var _baseIndexOfWith = _interopRequireDefault(require("./_baseIndexOfWith.js"));

var _baseUnary = _interopRequireDefault(require("./_baseUnary.js"));

var _copyArray = _interopRequireDefault(require("./_copyArray.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * The base implementation of `_.pullAllBy` without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns `array`.
 */

function basePullAll(array, values, iteratee, comparator) {
  var indexOf = comparator ? _baseIndexOfWith.default : _baseIndexOf.default,
      index = -1,
      length = values.length,
      seen = array;

  if (array === values) {
    values = (0, _copyArray.default)(values);
  }

  if (iteratee) {
    seen = (0, _arrayMap.default)(array, (0, _baseUnary.default)(iteratee));
  }

  while (++index < length) {
    var fromIndex = 0,
        value = values[index],
        computed = iteratee ? iteratee(value) : value;

    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
      if (seen !== array) {
        splice.call(seen, fromIndex, 1);
      }

      splice.call(array, fromIndex, 1);
    }
  }

  return array;
}

var _default = basePullAll;
exports.default = _default;