"use strict";

exports.__esModule = true;
exports.default = void 0;

var _baseToString = _interopRequireDefault(require("./_baseToString.js"));

var _castSlice = _interopRequireDefault(require("./_castSlice.js"));

var _hasUnicode = _interopRequireDefault(require("./_hasUnicode.js"));

var _isIterateeCall = _interopRequireDefault(require("./_isIterateeCall.js"));

var _isRegExp = _interopRequireDefault(require("./isRegExp.js"));

var _stringToArray = _interopRequireDefault(require("./_stringToArray.js"));

var _toString = _interopRequireDefault(require("./toString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;
/**
 * Splits `string` by `separator`.
 *
 * **Note:** This method is based on
 * [`String#split`](https://mdn.io/String/split).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to split.
 * @param {RegExp|string} separator The separator pattern to split by.
 * @param {number} [limit] The length to truncate results to.
 * @returns {Array} Returns the string segments.
 * @example
 *
 * _.split('a-b-c', '-', 2);
 * // => ['a', 'b']
 */

function split(string, separator, limit) {
  if (limit && typeof limit != 'number' && (0, _isIterateeCall.default)(string, separator, limit)) {
    separator = limit = undefined;
  }

  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

  if (!limit) {
    return [];
  }

  string = (0, _toString.default)(string);

  if (string && (typeof separator == 'string' || separator != null && !(0, _isRegExp.default)(separator))) {
    separator = (0, _baseToString.default)(separator);

    if (!separator && (0, _hasUnicode.default)(string)) {
      return (0, _castSlice.default)((0, _stringToArray.default)(string), 0, limit);
    }
  }

  return string.split(separator, limit);
}

var _default = split;
exports.default = _default;