"use strict";

exports.__esModule = true;
exports.default = void 0;

var _baseFindIndex = _interopRequireDefault(require("./_baseFindIndex.js"));

var _baseIsNaN = _interopRequireDefault(require("./_baseIsNaN.js"));

var _strictLastIndexOf = _interopRequireDefault(require("./_strictLastIndexOf.js"));

var _toInteger = _interopRequireDefault(require("./toInteger.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;
/**
 * This method is like `_.indexOf` except that it iterates over elements of
 * `array` from right to left.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.lastIndexOf([1, 2, 1, 2], 2);
 * // => 3
 *
 * // Search from the `fromIndex`.
 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
 * // => 1
 */

function lastIndexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;

  if (!length) {
    return -1;
  }

  var index = length;

  if (fromIndex !== undefined) {
    index = (0, _toInteger.default)(fromIndex);
    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
  }

  return value === value ? (0, _strictLastIndexOf.default)(array, value, index) : (0, _baseFindIndex.default)(array, _baseIsNaN.default, index, true);
}

var _default = lastIndexOf;
exports.default = _default;