"use strict";

exports.__esModule = true;
exports.default = void 0;

var _baseDifference = _interopRequireDefault(require("./_baseDifference.js"));

var _baseFlatten = _interopRequireDefault(require("./_baseFlatten.js"));

var _baseRest = _interopRequireDefault(require("./_baseRest.js"));

var _isArrayLikeObject = _interopRequireDefault(require("./isArrayLikeObject.js"));

var _last = _interopRequireDefault(require("./last.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This method is like `_.difference` except that it accepts `comparator`
 * which is invoked to compare elements of `array` to `values`. The order and
 * references of result values are determined by the first array. The comparator
 * is invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 *
 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }]
 */
var differenceWith = (0, _baseRest.default)(function (array, values) {
  var comparator = (0, _last.default)(values);

  if ((0, _isArrayLikeObject.default)(comparator)) {
    comparator = undefined;
  }

  return (0, _isArrayLikeObject.default)(array) ? (0, _baseDifference.default)(array, (0, _baseFlatten.default)(values, 1, _isArrayLikeObject.default, true), undefined, comparator) : [];
});
var _default = differenceWith;
exports.default = _default;